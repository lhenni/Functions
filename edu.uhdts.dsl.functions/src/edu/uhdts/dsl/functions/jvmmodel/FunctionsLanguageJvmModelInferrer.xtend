/*
 * generated by Xtext 2.12.0
 */
package edu.uhdts.dsl.functions.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import edu.uhdts.dsl.functions.functionsLanguage.FunctionsFile
import edu.uhdts.dsl.functions.functionsLanguage.Function
import edu.uhdts.dsl.functions.codegen.classgenerators.FunctionClassGenerator
import edu.uhdts.dsl.functions.codegen.typesbuilder.JvmTypesBuilderWithoutAssociations
import edu.uhdts.dsl.functions.codegen.typesbuilder.TypesBuilderExtensionProvider
import edu.uhdts.dsl.functions.codegen.classgenerators.FunctionFacadeClassGenerator
import edu.uhdts.dsl.functions.codegen.classgenerators.ClassGenerator

/**
 * <p>Infers a JVM model from the source model.</p> 
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class FunctionsLanguageJvmModelInferrer extends AbstractModelInferrer {

	@Inject extension JvmTypesBuilderWithoutAssociations _typesBuilder
	@Inject TypesBuilderExtensionProvider typesBuilderExtensionProvider;

	private def void updateBuilders() {
		typesBuilderExtensionProvider.setBuilders(_typesBuilder, _typeReferenceBuilder, _annotationTypesBuilder);
	}

	def void generate(Function function, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		acceptor.accept(new FunctionClassGenerator(function, typesBuilderExtensionProvider));
	}

	def dispatch void infer(FunctionsFile functionsFile, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		updateBuilders();

		acceptor.accept(new FunctionFacadeClassGenerator(functionsFile, typesBuilderExtensionProvider));
		for (function : functionsFile.functions) {
			generate(function, acceptor, isPreIndexingPhase);
		}
	}

	def private static accept(IJvmDeclaredTypeAcceptor acceptor, extension ClassGenerator generator) {
		acceptor.accept(generator.generateEmptyClass())[generateBody]
	}
}
