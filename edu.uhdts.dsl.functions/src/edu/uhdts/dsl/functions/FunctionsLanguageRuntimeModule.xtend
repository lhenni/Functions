/*
 * generated by Xtext 2.12.0
 */
package edu.uhdts.dsl.functions

import com.google.inject.Binder
import edu.uhdts.dsl.functions.generator.FunctionsLanguageGenerator
import edu.uhdts.dsl.functions.scoping.FunctionsLanguageGlobalScopeProvider
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import com.google.inject.name.Names
import edu.uhdts.dsl.functions.scoping.FunctionsLanguageScopeProviderDelegate

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class FunctionsLanguageRuntimeModule extends AbstractFunctionsLanguageRuntimeModule {

	public override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return FunctionsLanguageGlobalScopeProvider;
	}

	public override void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider).annotatedWith(
			Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
			FunctionsLanguageScopeProviderDelegate);
	}

	/*public override Class<? extends ILinkingService> bindILinkingService() {
	 * 	return FunctionsLinkingService;
	 }*/
	// original:
	/*public override void configureIScopeProviderDelegate(Binder binder) {
	 * 	binder.bind(org.eclipse.xtext.scoping.IScopeProvider)
	 * 	      .annotatedWith(Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
	 * 	      .to(ReactionsLanguageScopeProviderDelegate);
	 }*/
	/* public override Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
	 * 		return MirBaseQualifiedNameConverter;
	 }*/
	/*public override Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
	 * 	return MirBaseQualifiedNameConverter;
	 }*/
	/*public override Class<? extends ILinkingService> bindILinkingService() {
	 * 	return ReactionsLinkingService;
	 }*/
	def Class<? extends IGenerator2> bindIGenerator2() {
		FunctionsLanguageGenerator
	}

	override configure(Binder binder) {
		super.configure(binder);
		binder.bind(IGenerator2).to(bindIGenerator2())
	}
}
