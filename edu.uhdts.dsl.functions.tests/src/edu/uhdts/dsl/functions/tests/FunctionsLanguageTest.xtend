/*
 * generated by Xtext 2.12.0
 */
package edu.uhdts.dsl.functions.tests

import com.google.inject.Inject
import edu.uhdts.dsl.functions.functionsLanguage.FunctionsFile
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.junit.BeforeClass
import org.junit.FixMethodOrder
import org.junit.runners.MethodSorters

@RunWith(XtextRunner)
@InjectWith(FunctionsLanguageInjectorProvider)
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
class FunctionsLanguageTest {

	@Inject ParseHelper<FunctionsFile> parseHelper
	@Inject IGenerator generator

	static InMemoryFileSystemAccess fsa;
	static FunctionsFile model1;
	static FunctionsFile model2;

	@BeforeClass
	def static void setup() {
		fsa = new InMemoryFileSystemAccess()
	}

	@Test
	def void test1_loadModel1() {
		var model = parseHelper.parse('''
			functions: Sample1
			function s1f1 {
				call s1f2
			}
			
			function s1f2 {
				execute {
					System.out.println("Hi from sample 1");
				}
			}
		''')
		Assert.assertNotNull(model)
		Assert.assertTrue(model.eResource.errors.isEmpty)
		model1 = model;
	}

	@Test
	def void test2_loadModel2() {
		var model = parseHelper.parse('''
			functions: Sample2
			function s2f1 {
				call s2f2
			}
			
			function s2f2 {
				execute {
					System.out.println("Hi from sample 2");
				}
			}
		''')
		Assert.assertNotNull(model)
		Assert.assertTrue(model.eResource.errors.isEmpty)
		model2 = model;
	}

	@Test
	def void test3_generateModels() {
		generator.doGenerate(model1.eResource, fsa);
		generator.doGenerate(model2.eResource, fsa);
		println(fsa.files)
	}

	@Test
	def void test4_runFunctions() {
	}
}
